{"version":3,"file":"static/webpack/static/development/pages/products.js.13291b4f5669e6d7fef6.hot-update.js","sources":["webpack:///./src/api/apiClient.js"],"sourcesContent":["/* eslint-disable no-constant-condition */\n/* eslint-disable no-await-in-loop */\n\nimport config from '../config'\nimport urls from '../constants/urls'\nimport { getGuestToken } from './getGuestToken'\nimport { refreshCustomerToken } from './customers/refreshCustomerToken'\nimport { getToken } from '../utils/token'\nimport { getRefreshToken } from '../utils/refreshToken'\nimport { toast } from 'react-toastify'\nimport 'isomorphic-unfetch'\nimport { server } from '../config'\nimport { isBrowser } from '../utils/is-browser'\n\nconst makeRequest = (url, options, token) =>\n  fetch(`${server}/api/skus?include=prices`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/vnd.api+json',\n      Authorization: `Bearer ${token}`,\n    },\n    ...options,\n  })\n\nexport const api = async (url, options) => {\n  // Grab the token from the store or from the API\n  let token = getToken() || (await getGuestToken())\n\n  try {\n    // Do the request\n    let response = await makeRequest(url, options, token)\n\n    // 401 unauthorized means we have expired token\n    if (response && response.status === 401) {\n      const refreshToken = getRefreshToken()\n\n      // If we have a refresh token this means we have logged in user\n      // and we need to refresh access token\n      if (refreshToken) {\n        token = await refreshCustomerToken()\n      } else {\n        // If no refresh token is present just get new guest token\n        token = await getGuestToken()\n      }\n\n      // Repeat the request with the new token\n      response = await makeRequest(url, options, token)\n    }\n\n    // Here is a place to handle special cases\n    // CASE: second 401 we need to logout\n    if (response && response.status === 401) {\n      isBrowser() && window.location.assign(urls.logout)\n    }\n\n    console.log(\"________XXXX______\", response.json())\n\n    // If everything went fine just return the result\n    return response.json()\n  } catch (e) {\n    // Place to handle global api errors\n    toast.error('Internet connection lost.. :(')\n    throw e\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AADA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AASA;AAGA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAeA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAkBA;AACA;AAnBA;AAAA;AAAA;AACA;AADA;AAsBA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCA;AACA;AADA;AAAA;AAAA;AAoCA;AACA;AArCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}